<!-- Launch file for challenge problem 1 -->
<launch>
  <!-- Parameters for the kobuki base with the kinect sensor -->
  <arg name="base" value="$(optenv TURTLEBOT_BASE kobuki)"/>
  <arg name="3d_sensor" value="kinect"/>
  <arg name="stacks" value="$(optenv TURTLEBOT_STACKS hexagons)"/>
  

  <!-- This is the map file that will be used for planning -->
  <arg name="map_file" value="$(find cp_gazebo)/maps/Wean-entire-floor4.yaml"/>


  <!-- Start the gazebo world, so that obstacles can be mapped -->
  <!-- NOTE: The maze in the world might not be needed if the map server is required -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find cp_gazebo)/worlds/Wean-complete-floor4-cp2.world"/>
    <arg name="gui" value="false"/>
    <arg name="headless" value="true"/>
  </include>

  <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find cp_gazebo)/robot_description/cp2/turtlebot_description/robots/kobuki_hexagons_kinect.urdf.xacro'" />
  <param name="robot_description" command="$(arg urdf_file)" />
  
  <!-- Gazebo model spawner -->
  <node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
        args="-x -40 -y 26.5 -unpause -urdf -param robot_description -model mobile_base"/>
  
  <!-- Velocity muxer -->
  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
        args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
  </node>
  

  <!-- Spawn the turtlebot -->
  <!--
<include file="$(find cp_gazebo)/robot_description/cp2/$(arg base).launch.xml">
      <arg name="base" value="$(arg base)"/>
      <arg name="3d_sensor" value="$(arg 3d_sensor)"/>
      <arg name="stacks" value="$(arg stacks)"/>
  </include>
-->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0"/>
  </node>

  <!-- Fake the laser with the kinect ? -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>

  <!-- start the map server -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)"/>

  <!-- This is the initial pose (for AMCL) of the turtlebot -->
  <arg name="initial_pose_x" default="0.0"/> 
  <arg name="initial_pose_y" default="0.0"/> 
  <arg name="initial_pose_a" default="0.0"/>
  <include file="$(find turtlebot_navigation)/launch/includes/amcl.launch.xml">
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include>

  <!-- Launch move base -->
  <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml">
  </include>

  <!-- Launch instruction graph, with initial instruction files -->
  <node name="ig_interpreter" pkg="ig_action_server" type="ig_server.py" output="screen">
  </node>

  <node name="brasscomms" pkg="brasscomms" type="brasscomms.py" output="screen">
  </node>
  <node name="depth_tf_broadcaster" pkg="cp_gazebo" type="tf_broadcaster.py" output="screen">
  </node>
</launch>
